Add proper support for greyscale images and profiles.

| Need to be able to remove images from the left hand tray.

| Add newly-created presets to the preset list.

Need some kind of preset manager - will show a list of presets, and allow them to be edited or deleted.

Add support for creatng DeviceLinks.
  Cache them in cmyktool/devicelinks, and store them using filenames of the form
  <MD5Hash_of_source_profile>-<MD5Hash_of_dest_profile>-<MD5Hash_of_conversion_settings>.icc
  That way the destination profile can be identified for proofing and embedding purposes.
  Better yet, use an MD5 hash of the entire CMYKConversionOpts as a filename, and save metadata
  alonside the devicelink.

Need to maintain a list of available devicelinks, which will be made available in the conversionoptsdialog.

The devicelinks are defined by:
* Source Profile
* Destination Profile
* Rendering Intent
* Black Generation
* Viewing conditions
Also need a "Description" field.


Since we need to call both Argyll utilities and GhostScript, need to create a better solution
for calling command-line programs.

class ExternalProgArgList : public std::deque<std::string>
{
	public:
	ExternalProgArgList() : std::deque<std::string>()
	{
	}
	virtual ~ExternalProgArgList()
	{
	}
	virtual std::string &operator[](const ExternalProgArgList &arglist,int i)
	{
		if(i<0)
			throw "ExternalProgArgList - index must be >= 0";
		while(size()<=i)
		{
			push_back("");
		}
		return(std::deque<std::string>::operator[](*this,i));
	}
};

class ExternalProgram : public SearchPathHandler
{
	public:
	ExternalProgram() : SearchPathHandler()
	{
		SetDefaultPath();
	}
	virtual ~ExternalProgram()
	{
	}
	virtual void SetDefaultPath()
	{
		// If the application knows where a particular program should be stored,
		// such as /usr/lib/cups/backend, or c:/Program Files/PhotoPrint/
		// then override and set in here.
	}
	virtual void Run()
	{
	}
};


Add a "Width" parameter to the "Hold Grey" code which will cause near-greys to be modified in an
interpolated fashion between the output of the CMS transform and the pure grey pixel value.
(This could be useful for hold black mode, too.)

Improve the grey rendition by creating and inverting an LUT from the CMYK profile.

Add DuoTone capability (probably better handled with a separate utility) which would allow 
you to set an approximate tone for a spot colour, and have a duotone image calculated.
Would work by finding a CMYK approximation for that colour, then building a 2D lookup-table
using the CMYK profile.

Add ability to perform a "naive" RGB->CMYK conversion with no profiles.

Solve problem with UTF-8 filenames on Win32.
Need to use wide version of fopen - which unfortunately means avoiding the use of ifstream.
(Perhaps implement an equivalent?)
Use a variant of fdstream.hpp?
Need to convert from UTF-8 to UTF-16 wchar_t...  (Is glib going to be the easiest way, or can we avoid that dependency?)

| Add support for saving CMYK JPEGs.
| Why is resolution being saved just fine for RGB JPEGs but not for CMYK ones?
| (Because JFIF doesn't support CMYK, so we'd need to save a proper Adobe header with the resolution
| encoded differently.  For now we simply write a JFIF header despite the colourspace not officially being
| supported)

| Need to change the preset combo's position - it currently causes the image list to expand...
| (Solved by limiting the number of characters displayed from the preset's name)

| Add a chain-link widget to the head of each tab.  Then toggling zoom or panning pixbufview will affect
| all tabs with the link set.

| Use a separate fallback RGB and CMYK profile in the conversionopts.  This should solve the issue with devicelinks.

| Add "Ignore embedded profile" checkbox.

| Add ability to read coordinates to pixbufview.

| Figure out how to display colorant percentages?
| Perhaps move the display of the colorant blobs away from pixbufs to Cairo rendering, then draw the text on top?


Menus:

File -> Open...
File -> Quit
Edit -> Preferences...

Need to be able to set the source profile and other details conveniently.  (Including overriding
an embedded profile, if present.


| Needs to be able to store conversion presets.  The presets will have names, and be presented in a "SimpleCombo":

|These options will be saved in $XDG_CONFIG_HOME/cmyktool/
|On startup this directory will be scanned, and each file loaded in turn into a dummy ConfigDB
|from which the description will be extracted.
|(Can SimpleComboOption be changed so instead of a static array it builds a list?)



| Need a "core" object which will contain paths for colour profiles and other miscellaneous settings.
| and a dialog for setting core options.


| Also need a ConversionOptions object - something which can be passed around and copied.


| Need a better solution for the channel selectors - maybe a row of togglebuttons each with the squiggle icon
| in a different colour.  -  or maybe checkboxes with a coloured squiggle as a label?  (Settled on checkboxes
| with smaller blobs as labels.)


| Also needs to support converting from CMYK to RGB.

| Need to improve support for GhostScript backend.  Colourspace can be set using the input profile's colourspace.
| Temp files?  Lifetimes?  Multiple pages?

Need to separate rendering and temp file tracking.

| Need an ImageBuffer of some kind - something that can hold an image for further processing.


| Need to support multi-selection in the ImageSelector!


-------------------------------------

PSRip

Tool needs to allow a PS File to be dragged and dropped, or selected from a menu.  When a PS file is opened, a dialog
will pop up asking for RIP options - which amounts to:

* B/w, Grey, RGB or CMYK rendering.
* Resolution
* Text anti-aliasing (generally turned off) -dTextAlphaBits=4
* Graphics anti-aliasing (generally turned on) -dGraphicsAlphaBits=4

------------------------------------------

| Need to consider thread pooling.  If you select a dozen images at once, you don't want to be running them all simultaneously.

| Perhaps some mutex-variation which uses a counter, similar to the RWMutex - would allow n threads to hold it at once,
| but make any further threads wait until the counter had diminished again.  (Multex)

| Better would be a work queue, and a small number of worker threads.
| Better, track worker threads and re-use them.  Requires message passing mechanism.  ThreadEvents? (Used Mutexes)

| Make SearchPath thread-safe.  (Needs a perseparate iterator which tracks open directories.)

| Need a way of handling job deletion - needs to be tracked by the UITab, but has to be able to self-delete, too.
| Will have to be mutex-protected.  Reference counting?
| The scenario that causes the problem is this:
| If the main thread queues a job A, which references object B, it's possible for the main thread to delete
| B before job A is run, and there's no way, currently, of robustly cancelling job A.
| The most elegant solution to this is probably to build a second queue, so there's a waiting and a running queue, then
| provide a Cancel() method to the jobdispatcher which takes a Job pointer as an argument.
| The dispatcher will then search both queues, and if found, delete the job.  If the job is not found in either queue, then 
| it's either finished and self-destructed, or about to be so.

| Needs to be possible to interrupt redraw if the selected colorants changes.

--------------------

| Error message handling

| Needs to be some way of propogating error messages to the main thread for display to the user.
| It's not safe on Win32 for subthreads to pop up dialogs, so such a task must be deferred to the main
| thread by means of an idle/timeout handler.

| Need to maintain a queue of error messages.  It should be possible to merge them into a single message and display
| them in a single dialog - adding them to an existing dialog if it's open.

| Error message display code will be implemented as a global instance which will be informed of the top-level window
| when the program initializes - thus eliminating the need to pass around a parent window handle.

| Add support to pixbufview for page flipping.  This will allow imagetarget functionality to be folded into cmyktool.
| (Would use "normal", "normal proof" and "devicelink" optiosn on a combo, so they could be swapped with the mousewheel.)
| Will need to store a list of pixbufs, and have support for setting a page number.
| pixbufview_set_image() will clear the image list, and set the provided image as a first page.
| pixbufview_add_page(PixbufView *pb,GdkPixbuf *pb);
| pixbufview_set_page(PixbufView *pb,int page);
| pixbufview_clear_pages(PixbufView *pb);

